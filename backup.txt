import java.util.Scanner;

abstract class Account {
    double interestRate;
    double amount;

    abstract double calculateInterest() throws InvalidValueException;
}

class FDAccount extends Account {
    int noOfDays;
    int ageOfACHolder;

    FDAccount(double amount, int noOfDays, int ageOfACHolder) {
        this.amount = amount;
        this.noOfDays = noOfDays;
        this.ageOfACHolder = ageOfACHolder;
    }

    @Override
    double calculateInterest() throws InvalidValueException {
        if (amount < 0 || noOfDays <= 0 || ageOfACHolder < 0) {
            throw new InvalidValueException("Invalid input values");
        }

        double interest = 0;

        // Check if amount is less than 1 crore
        if (amount <= 10000000) {
            if (noOfDays >= 7 && noOfDays <= 14) {
                interestRate = ageOfACHolder >= 60 ? 5.00 : 4.50;
            } else if (noOfDays >= 15 && noOfDays <= 29) {
                interestRate = ageOfACHolder >= 60 ? 5.25 : 4.75;
            } else if (noOfDays >= 30 && noOfDays <= 45) {
                interestRate = ageOfACHolder >= 60 ? 6.00 : 5.50;
            } else if (noOfDays >= 45 && noOfDays <= 60) {
                interestRate = ageOfACHolder >= 60 ? 7.50 : 7.00;
            } else if (noOfDays >= 61 && noOfDays <= 184) {
                interestRate = ageOfACHolder >= 60 ? 8.00 : 7.50;
            } else if (noOfDays >= 185 && noOfDays <= 365) {
                interestRate = ageOfACHolder >= 60 ? 8.50 : 8.00;
            } else {
                throw new InvalidValueException("Invalid number of days for FD");
            }
        } else {
            // For amounts above 1 crore
            if (noOfDays >= 7 && noOfDays <= 14) {
                interestRate = 6.50;
            } else if (noOfDays >= 15 && noOfDays <= 29) {
                interestRate = 6.75;
            } else if (noOfDays >= 30 && noOfDays <= 45) {
                interestRate = 6.75;
            } else if (noOfDays >= 45 && noOfDays <= 60) {
                interestRate = 8.00;
            } else if (noOfDays >= 61 && noOfDays <= 184) {
                interestRate = 8.50;
            } else if (noOfDays >= 185 && noOfDays <= 365) {
                interestRate = 10.00;
            } else {
                throw new InvalidValueException("Invalid number of days for FD");
            }
        }

        interest = (amount * interestRate * noOfDays) / (36500);
        return interest;
    }
}

class SBAccount extends Account {
    SBAccount(double amount) {
        this.amount = amount;
    }

    @Override
    double calculateInterest() throws InvalidValueException {
        if (amount < 0) {
            throw new InvalidValueException("Invalid input values");
        }

        // For SB account, the interest rate is a fixed value
        interestRate = 4.0;

        return (interestRate * amount) / 100;
    }
}

class RDAccount extends Account {
    int noOfMonths;
    double monthlyAmount;

    RDAccount(double amount, int noOfMonths, double monthlyAmount) {
        this.amount = amount;
        this.noOfMonths = noOfMonths;
        this.monthlyAmount = monthlyAmount;
    }

    @Override
    double calculateInterest() throws InvalidValueException {
        if (amount < 0 || noOfMonths <= 0 || monthlyAmount <= 0) {
            throw new InvalidValueException("Invalid input values");
        }

        if (noOfMonths == 6) {
            interestRate = amount < 10000000 ? 7.50 : 8.00;
        } else if (noOfMonths == 9) {
            interestRate = amount < 10000000 ? 7.75 : 8.25;
        } else if (noOfMonths == 12) {
            interestRate = amount < 10000000 ? 8.00 : 8.50;
        } else if (noOfMonths == 15) {
            interestRate = amount < 10000000 ? 8.25 : 8.75;
        } else if (noOfMonths == 18) {
            interestRate = amount < 10000000 ? 8.50 : 9.00;
        } else if (noOfMonths == 21) {
            interestRate = amount < 10000000 ? 8.75 : 9.25;
        } else {
            throw new InvalidValueException("Invalid number of months for RD");
        }

        double totalInterest = 0;
        for (int i = 1; i <= noOfMonths; i++) {
            totalInterest += (amount + (monthlyAmount * (noOfMonths - i + 1))) * (interestRate / 1200);
        }

        return totalInterest;
    }
}

class InvalidValueException extends Exception {
    InvalidValueException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Select the option:");
            System.out.println("1. Interest Calculator SB");
            System.out.println("2. Interest Calculator FD");
            System.out.println("3. Interest Calculator RD");
            System.out.println("4. Exit");

            int option = scanner.nextInt();

            if (option == 4) {
                System.out.println("The program will exit now...");
                break;
            }

            try {
                switch (option) {
                    case 1:
                        System.out.println("Enter the Average amount in your account:");
                        double sbAmount = scanner.nextDouble();
                        SBAccount sbAccount = new SBAccount(sbAmount);
                        double sbInterest = sbAccount.calculateInterest();
                        System.out.println("Interest gained: Rs. " + sbInterest);
                        break;

                    case 2:
                        System.out.println("Enter the FD amount:");
                        double fdAmount = scanner.nextDouble();
                        System.out.println("Enter the number of days:");
                        int fdDays = scanner.nextInt();
                        System.out.println("Enter your age:");
                        int fdAge = scanner.nextInt();
                        FDAccount fdAccount = new FDAccount(fdAmount, fdDays, fdAge);
                        double fdInterest = fdAccount.calculateInterest();
                        System.out.println("Interest gained is: Rs. " + fdInterest);
                        break;

                    case 3:
                        System.out.println("Enter the RD amount:");
                        double rdAmount = scanner.nextDouble();
                        System.out.println("Enter the number of months:");
                        int rdMonths = scanner.nextInt();
                        System.out.println("Enter the monthly amount:");
                        double rdMonthlyAmount = scanner.nextDouble();
                        RDAccount rdAccount = new RDAccount(rdAmount, rdMonths, rdMonthlyAmount);
                        double rdInterest = rdAccount.calculateInterest();
                        System.out.println("Interest gained is: Rs. " + rdInterest);
                        break;

                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            } catch (InvalidValueException e) {
                System.out.println(e.getMessage());
            }
        }

        scanner.close();
    }
}